//
//  ECMutableFileRenderer.m
//  CodeView3
//
//  Created by Nicola Peduzzi on 12/04/11.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#import "ECMutableTextFileRenderer.h"
#import <CoreText/CoreText.h>

@class FramesetterInfo;
@class FrameInfo;

#pragma mark -
#pragma mark FrameInfo

@protocol FrameInfoDelegate <NSObject>
@required
/// Called when the FrameInfo need to generate it's frame. The implmenter
/// should call generateWithFramesetter:stringRange:boundRect:.
- (void)frameInfoRequireGeneration:(FrameInfo *)frameInfo;
@end

@interface FrameInfo : NSObject

@property (assign) id<FrameInfoDelegate> delegate;

/// Hold a reference to the frame connected with this info block.
/// This reference may be NULL is the frame has been released due to no use.
@property (readonly) CTFrameRef frame;

/// The effective string range rendered int the frame.
@property (readonly) CFRange actualStringRange;

/// Rect used to render the frame. This rect should have his width equal
/// to the frameWidth property.
@property (readonly) CGRect rect;

/// Contains the actual size of this frame. Width may be smaler than rect's
/// one and height is calculated from the top of the first line to the 
/// bottom of the last rendered one.
@property (readonly) CGSize actualSize;

- (id)initWithDelegate:(id<FrameInfoDelegate>)del;

- (void)invalidateFrame;

- (void)generateWithFramesetter:(CTFramesetterRef)framesetter stringRange:(CFRange)range boundRect:(CGRect)bounds;

- (void)enumerateLinesUsingBlock:(void(^)(CTLineRef line, CFIndex idx, BOOL *stop))block;

@end

@implementation FrameInfo

@synthesize delegate, frame, actualStringRange, rect, actualSize;

- (id)initWithDelegate:(id<FrameInfoDelegate>)del
{
    if ((self = [super init])) 
    {
        delegate = del;
    }
    return self;
}

- (CTFrameRef)frame
{
    // TODO probably better not a while loop?
    if (!delegate) 
    {
        [NSException raise:@"Invalid delegate" format:@"Delegate should be set to a valid instance and implement FrameInfoDelegate."];
    }
    while (!frame)
    {
        [delegate frameInfoRequireGeneration:self];
    }
    return frame;
}

- (void)dealloc
{
    [self invalidateFrame];
    [super dealloc];
}

- (void)invalidateFrame
{
    if (frame) 
    {
        CFRelease(frame);
        frame = NULL;
    }
}

- (void)generateWithFramesetter:(CTFramesetterRef)framesetter stringRange:(CFRange)range boundRect:(CGRect)bounds
{
    [self invalidateFrame];
    CGMutablePathRef path = CGPathCreateMutable();
    CGPathAddRect(path, NULL, bounds);
    
    frame = CTFramesetterCreateFrame(framesetter, range, path, NULL);
    rect = bounds;
    actualStringRange = CTFrameGetVisibleStringRange(frame);
    
    __block CGSize accumSize = CGSizeZero;
    __block CGFloat width, ascent, descent;
    [self enumerateLinesUsingBlock:^(CTLineRef line, CFIndex idx, BOOL *stop) {
        width = CTLineGetTypographicBounds(line, &ascent, &descent, NULL);
        accumSize.width = MAX(accumSize.width, width);
        accumSize.height += ascent + descent;
    }];
    actualSize = accumSize;
    
    CGPathRelease(path);
}

- (void)enumerateLinesUsingBlock:(void (^)(CTLineRef, CFIndex, BOOL *))block
{
    BOOL stop = NO;
    CFArrayRef lines = CTFrameGetLines(self.frame);
    CFIndex lineCount = CFArrayGetCount(lines);
    for (CFIndex i = 0; i < lineCount; ++i) 
    {
        CTLineRef line = CFArrayGetValueAtIndex(lines, i);
        block(line, i, &stop);
        if (stop) break;
    }
}

@end

#pragma mark -
#pragma mark FramesetterInfo

@protocol FramesetterInfoDelegate <NSObject>
@required
/// Called when a FramesetterInfo require to create it's framesetter.
/// The implementer should call generateFramesetterWithString: on the given framesetterInfo.
- (void)framesetterInfoRequireGeneration:(FramesetterInfo *)framesetterInfo;
@end

@interface FramesetterInfo : NSObject <FrameInfoDelegate> {
@private
    /// Hold a reference to the framesetter connected with this info block. 
    /// This reference may be NULL if cleaning required the framesetter to be
    /// deallocated because not used.
    CTFramesetterRef framesetter;
    
    /// The string range in the content text that this framesetter is handling.
    CFRange stringRange;
    
    /// Get the actual rendered rect of the union of the framesetter's generated
    /// framses originated accordingly with previous framesetters.
    CGRect actualRect;
    
    /// The array of frames generated by this framesetter.
    NSMutableArray *frames;
    
    // TODO editing data and string attributes cache
}

/// The delegate (TODO or datasource?) for this FramesetterInfo.
@property (assign) id<FramesetterInfoDelegate> delegate;

@property CGSize framesPreferredSize;

/// Invalidate and release the generated framesetter.
- (void)invalidateFramesetter;

/// Release any previous framesetter and generate a new one from the given string.
- (void)generateFramesetterWithString:(NSAttributedString *)string;

@end

@implementation FramesetterInfo

@synthesize delegate, framesPreferredSize;

- (id)init 
{
    if ((self = [super init])) 
    {
        frames = [NSMutableArray new];
        framesPreferredSize = CGSizeMake(768, 1024);
    }
    return self;
}

- (void)dealloc
{
    [self invalidateFramesetter];
    [frames release];
    [super dealloc];
}

- (void)invalidateFramesetter
{
    if (framesetter)
    {
        CFRelease(framesetter);
        framesetter = NULL;
    }
}

- (void)generateFramesetterWithString:(NSAttributedString *)string
{
    [self invalidateFramesetter];
    framesetter = CTFramesetterCreateWithAttributedString((CFAttributedStringRef)string);
    
    NSUInteger stringLength = [string length];
    CFRange frameRange = stringRange = CFRangeMake(0, 0);
    CGRect frameRect = (CGRect){ CGPointZero, framesPreferredSize };
    [frames removeAllObjects];
    FrameInfo *frameInfo;
    while (stringRange.length != stringLength) 
    {
        frameInfo = [[FrameInfo alloc] initWithDelegate:self];
        [frameInfo generateWithFramesetter:framesetter stringRange:frameRange boundRect:frameRect];
        frameRange.location += frameInfo.actualStringRange.length;
        stringRange.length += frameInfo.actualStringRange.length;
        
        [frames addObject:frameInfo];
        [frameInfo release];
    }
}

- (void)frameInfoRequireGeneration:(FrameInfo *)frameInfo
{

}

@end


#pragma mark Class continuations
@interface ECMutableTextFileRenderer () {
@private
    // TODO use a cache of frameWidth -> info dictionary
//    NSCache *widthCache;
    
    /// Dictionary of FramesetterInfo to NSMutableArray of FrameInfo.
    NSMutableDictionary *info;
    
    NSAttributedString *string;
}

- (void)invalidateAllFramesetters;

@end

#pragma mark ECMutableTextFileRenderer Implementation
@implementation ECMutableTextFileRenderer

#pragma mark Properties
@synthesize inputStream;
@synthesize framesetterStringLengthLimit;
@synthesize framePreferredHeight;
@synthesize frameWidth;

- (void)setInputStream:(NSInputStream *)stream
{
    // Close current stream
    [inputStream close];
    [inputStream release];
    
    // Attach to new stream
    inputStream = [stream retain];
    [inputStream setDelegate:self];
    // TODO study this method to optimize
    [inputStream scheduleInRunLoop:[NSRunLoop mainRunLoop] forMode:NSDefaultRunLoopMode];
    [inputStream open];
}

- (void)setString:(NSAttributedString *)aString
{
    [string release];
    string = [aString retain];
    
    [self invalidateAllFramesetters];
}

#pragma mark -
#pragma mark Initialization

- (id)init {
    if ((self = [super init])) 
    {
        framesetterStringLengthLimit = 0;
        framePreferredHeight = 1024;
        frameWidth = 768;
    }
    return self;
}

#pragma mark -
#pragma mark Input stream delegate

- (void)stream:(NSStream *)aStream handleEvent:(NSStreamEvent)eventCode
{
    switch (eventCode) {
        case NSStreamEventHasBytesAvailable:
        {
            // TODO see file:///Library/Developer/Documentation/DocSets/com.apple.adc.documentation.AppleiOS4_3.iOSLibrary.docset/Contents/Resources/Documents/index.html#documentation/Cocoa/Conceptual/Streams/Articles/ReadingInputStreams.html#//apple_ref/doc/uid/20002273-BCIJHAGD
            break;
        }
    }
}

#pragma mark -
#pragma mark Framesetters and frame generation

- (void)invalidateAllFramesetters
{
    [info enumerateKeysAndObjectsUsingBlock:^(FramesetterInfo *key, NSMutableArray *val, BOOL *stop) {
        [val removeAllObjects];
        
    }];
}

#pragma mark -
#pragma mark Rendering

- (void)drawTextInBounds:(CGRect)bounds inContext:(CGContextRef)context
{
    
}
@end
